<?xml version="1.0" encoding="utf-8" ?>
<Configuration>

  <!--
  Configuration - Loading Assemblies
  ==================================
  Custom assemblies that should be loaded on startup. Typically this is used to load additional behaviors but it can really
  be used to load any assembly, for example a library that is used by a behavior that you are implementing. To create add an additional
  behavior you need to create a shared library (DLL) with a class that subtypes the abstract class AbstractBehavior. See also the provided
  examples NumberBehavior, CopyBehavior, DeriveBehavior, and DefaultValueBehavior.
   -->
  <LoadAssemblies>
    <Assembly Path="NumberBehavior.dll" />
    <Assembly Path="CopyBehavior.dll" />
    <Assembly Path="DeriveBehavior.dll" />
    <Assembly Path="DefaultValueBehavior.dll" />
    <Assembly Path="TrackLastStatusChangeBehavior.dll" />
    <Assembly Path="AssignReleaseRiskBehavior.dll" />
    <Assembly Path="ShadowBacklogBehavior.dll" />
    <Assembly Path="IntermediateRankBehavior.dll" />
    <Assembly Path="CloneProjectBehavior.dll" />
    <Assembly Path="SAFeExtension.dll" />
    <Assembly Path="TypeColorBehavior.dll" />
    <Assembly Path="DerivedColumnExpressionExample.dll" />
  </LoadAssemblies>

  <!-- NOTE:
       This is Schneider Electrics settings file for Jean for Hansoft that is applicable when used with the SAFe kit for Hansoft.
       See http://github.com/Hansoft/Hansoft-SAFeKit

       For a description of the generic behaviors and their parameters that are used below, please refer to the
       standard JeanSettings.xml file for Jean. See: http://github.com/Hansoft/Hansoft-Jean-Jean -->

  <Behaviors>

    <!-- To support instantiations of new projects (programs) from a template project  -->
    <CloneProjectBehavior />


    <!-- ******************************** -->
    <!-- Customizations for the Portfolio -->
    <!-- ******************************** -->
    <!-- This behavior is applied for all leaf backlog items in the backlog of all projects with a name that starts
         with the text 'Portfolio', i.e., the SAFe portfolio project. The behavior will:
           - Update the Feature summary field on epics to reflect changes to linked features
           - Automatically set the Theme column to the name of the parent item
           - Calculate WSJF, (User value+Time criticality+Risk reduction and opportunity enablement)/Job size. -->
    <DeriveBehavior HansoftProject="^Portfolio" View="Backlog" Find="Itemtype=&quot;Backlog item&quot;">
      <CustomColumn Name="Feature summary" Expression="SE.HansoftExtensions.SAFeExtension.FeatureSummary(current_task, true, &quot;Points completed&quot;)" />
      <CustomColumn Name="Theme" Expression="current_task.Parent.Name" />
      <!--<CustomColumn Name="WSJF" Expression="current_task.GetCustomColumnValue(&quot;Job size&quot;).ToInt() == 0 ? 0 : (current_task.GetCustomColumnValue(&quot;User value&quot;).ToInt() + current_task.GetCustomColumnValue(&quot;Time criticality&quot;).ToInt() + current_task.GetCustomColumnValue(&quot;Risk reduction and opportunity enablement&quot;).ToInt()) / current_task.GetCustomColumnValue(&quot;Job size&quot;).ToInt()" />-->
    </DeriveBehavior>


    <!-- *************************** -->
    <!-- Customizations for Programs -->
    <!-- *************************** -->
    <!-- The following behaviors are applied for all projects where the project name start with the
         text 'Program', i.e. these projects are considered SAFe programs. -->

    <!-- This behavior is applied for all backlog items in the program backlog that have children. It will:
         - Calculeate WSJF -->
    <!-- To add more projects use cherry-picking to avoid column missing exceptions: "^Program\s-\s(SBO\b|Bangalore\b)$" -->
    <DeriveBehavior HansoftProject="^Program\s-\sSBO$" View="Backlog" Find="Itemtype=&quot;Backlog item&quot;">
      <CustomColumn Name="WSJF" Expression="current_task.GetCustomColumnValue(&quot;Job size&quot;).ToInt() == 0 ? 0 : Math.Round((decimal)(current_task.GetCustomColumnValue(&quot;User value&quot;).ToInt() + current_task.GetCustomColumnValue(&quot;Time criticality&quot;).ToInt() + current_task.GetCustomColumnValue(&quot;Risk reduction and opportunity enablement&quot;).ToInt()) / current_task.GetCustomColumnValue(&quot;Job size&quot;).ToInt(), 2)" />
    </DeriveBehavior>

    <!-- This behavior is applied for Release items (milestones) in the schedule that are placed in a container named "Features". For these releases all backlog items that are tagged
         to the release will get the "Release Risk" column set. -->
    <!--<AssignReleaseRiskBehavior HansoftProject="^Program\s-\sSBO$" TrackingColumn="Release risk" RiskValues="Done, Low risk, Medium risk, High risk" Find="Itemtype=Release AND Immediateparentsubproject:Item(Features)" PointsOrDays="Points" LowRiskLimit="80" HighRiskLimit="120" ElevateBlockedItems="Yes" ConsiderRiskColumn="No" />-->

    <!-- This behavior will track the time when the status field was last changed on items in the product backlog -->
    <!--<TrackLastStatusChangeBehavior HansoftProject="^Program\s-\sSBO$" View="Backlog" TrackingColumn="Status last changed" TrackedColumn="Aggregated status"/>-->

    <!-- This behavior will colorize the items in the boardview based on type value defined in TypeColors.xml -->
    <TypeColorBehavior HansoftProject="^Program\s-\sSBO$" View="Backlog" />

    <!-- For each feature (Backlog item) in Program Backlog, derives column data from any linked
         milestones (release) and/or stories in team projects. -->
    <DeriveBehavior HansoftProject="^Program\s-\sSBO$" View="Backlog" Find="Itemtype=&quot;Backlog item&quot;"> 
      <Status                                    Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.AggregatedStatus(current_task)" />
      <IsCompleted                               Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.IsCompleted(current_task)" />
      <Points                                    Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsNotCompleted(current_task)" />
      <CustomColumn Name="Points completed"      Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsCompleted(current_task)" />
      <CustomColumn Name="Points in progress"    Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsInProgress(current_task)" />
      <CustomColumn Name="Points not done"       Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsNotDone(current_task)" />
      <CustomColumn Name="Points blocked"        Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsBlocked(current_task)" />
      <CustomColumn Name="Points count"          Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsCount(current_task)" />
      <CustomColumn Name="Team"                  Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.Team(current_task)" />
      <CustomColumn Name="Items completed"       Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.ItemsCompleted(current_task)" />
      <CustomColumn Name="Items in progress"     Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.ItemsInProgress(current_task)" />
      <CustomColumn Name="Items not done"        Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.ItemsNotDone(current_task)" />
      <CustomColumn Name="Items blocked"         Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.ItemsBlocked(current_task)" />
      <CustomColumn Name="Items count"           Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.ItemsCount(current_task)" />
      <CustomColumn Name="Feature summary"       Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.FeatureSummary(current_task)" />
      <CustomColumn Name="Internal dependencies" Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.InternalDependencies(current_task)" />
      <CustomColumn Name="External dependencies" Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.ExternalDependencies(current_task)" />
    </DeriveBehavior>


    <!-- *********************************************** -->
    <!-- Customizations for all teams excluding HW teams -->
    <!-- *********************************************** -->
    <!-- Update all milestones that have team dependencies. -->
    <DeriveBehavior HansoftProject="^Team\s-\s[a-zA-Z\s]+(?!\(HW\))$" View="Scheduled" Find="Itemtype=&quot;Release&quot;">
      <CustomColumn Name="Consumers" Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.Consumers(current_task)" />
    </DeriveBehavior>

    <!-- This behavior will colorize the items in the boardview based on type value defined in TypeColors.xml -->
    <TypeColorBehavior HansoftProject="^Team\s-\s[a-zA-Z\s]+(?!\(HW\))$" View="Backlog" />


    <!-- *************************** -->
    <!-- Customizations for Projects -->
    <!-- *************************** -->
    <!-- The following behaviors are applied for all projects where the project name start with the
         text 'Project', i.e. these projects are considered traditional (non-agile) projects. -->

    <!-- This behavior is applied for all scheduled tasks in a traditional project.
         For a scheduled task which is linked to a milestone (release), it will, :
         - set the tasks Finish date to the date of the milestone.
         - set the tasks Status to an aggregated value for the backlog items which is part of the milestone.
         - set the tasks Task completed (%) to the percent of points completed for the backlog items which is part of the milestone. -->
    <DeriveBehavior HansoftProject="^Project\s-\s" View="Scheduled" Find="Itemtype=&quot;Scheduled task&quot;">
      <Status                                 Expression="SE.HansoftExtensions.ProjectTaskFromMilestone.Update(current_task)" />
      <Points                                 Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsNotCompleted(current_task)" />
      <CustomColumn Name="Points completed"   Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsCompleted(current_task)" />
      <CustomColumn Name="Points in progress" Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsInProgress(current_task)" />
      <CustomColumn Name="Points not done"    Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsNotDone(current_task)" />
      <CustomColumn Name="Points blocked"     Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.PointsBlocked(current_task)" />
    </DeriveBehavior>

    <!-- For MP-x project calculate feature summary -->
    <DeriveBehavior HansoftProject="^Project\s-\sMP-x$" View="Backlog" Find="Itemtype=&quot;Backlog item&quot;">
      <CustomColumn Name="Feature summary"    Expression="SE.HansoftExtensions.TeamStories2ProgramFeatureAggregation.FeatureSummary(current_task)" />
    </DeriveBehavior>

    <!-- This behavior is applied for all backlog items in the project backlog. It will:
         - Calculeate WSJF -->
    <!-- To add more projects use cherry-picking to avoid column missing exceptions: "^Project\s-\s(MPC\b|Other\b)$" -->
    <DeriveBehavior HansoftProject="^Project\s-\sMPC$" View="Backlog" Find="">
      <CustomColumn Name="WSJF" Expression="current_task.GetCustomColumnValue(&quot;Job size&quot;).ToInt() == 0 ? 0 : Math.Round((decimal)(current_task.GetCustomColumnValue(&quot;User value&quot;).ToInt() + current_task.GetCustomColumnValue(&quot;Time criticality&quot;).ToInt() + current_task.GetCustomColumnValue(&quot;Risk reduction and opportunity enablement&quot;).ToInt()) / current_task.GetCustomColumnValue(&quot;Job size&quot;).ToInt(), 2)" />
    </DeriveBehavior>


    <!-- *************************** -->
    <!-- Customizations for HW teams -->
    <!-- *************************** -->
    <DeriveBehavior HansoftProject="^Team\s-\s[a-zA-Z\s]+\s\(HW\)$" View="Scheduled" Find="Itemtype=&quot;Scheduled task&quot;">
      <Status Expression="SE.HansoftExtensions.ProjectTaskFromMilestone.Update(current_task)" />
    </DeriveBehavior>
    <DeriveBehavior HansoftProject="^Team\s-\s(C1\b|NGAS\b)\s\(HW\)$" View="Scheduled" Find="Itemtype=&quot;Scheduled task&quot;">
      <CustomColumn Name="Remaining work" Expression="Math.Round((decimal)(100 - current_task.PercentComplete) * (int)current_task.GetDefaultColumnValue(EHPMProjectDefaultColumn.BudgetedWork) / 100, 0)" />
      <CustomColumn Name="Completed work" Expression="Math.Round((decimal)current_task.PercentComplete * (int)current_task.GetDefaultColumnValue(EHPMProjectDefaultColumn.BudgetedWork) / 100, 0)" />
    </DeriveBehavior>


  </Behaviors>
</Configuration>
